import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Rect;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import java.util.ArrayList;
import java.util.Random;

//روش اجرای کد بازی : متد ()run از اینترفیس Runnable ، توسط Thread برنامه اجرا میشود و در حلقه ی تکرار while تا زمانیکه بازی در حال اجراست سه متد update و draw و control فراخوانی میشوند . طبق متد control متد run شصت بار در ثانیه اجرا میشود و در هر بار اجرا ، متد update حالت جدید و تغییر کرده ی اشیاء برنامه را اعلام میکند و این تغییر توسط متد draw طراحی و نمایش داده میشود (مثلا در متد update گفته شده که اگر چهارگوشه ی(Hitbox) اطراف اشیاء در بازی با هم برخورد کنند ، همان شئ برخورد کرده با player در موقعیت x=-100 یعنی در سمت چپ و با فاصله 100 پیکسل از صفحه نمایش بطوریکه دیده نشود نمایش داده شود) . در این بازی player در جهت محور x حرکتی ندارد و تنها دشمنان(سه دشمن enemy1 و enemy2 و enemy3 در هر لحظه) و همچنین ذرات معلق در هوا هستند که با کم شدن مقدار x آنها(بوسیله ی متد update آنها) بسمت چپ در حرکتند :
public class TDView extends SurfaceView implements Runnable {

//تعریف اشیاء و متغیرهای برنامه :
    volatile boolean playing;
    Thread gameThread = null;

    // Game objects
    private PlayerShip player;
    public EnemyShip enemy1;
    public EnemyShip enemy2;
    public EnemyShip enemy3;

    // Make some random space dust
    ArrayList<SpaceDust> dustList = new ArrayList<SpaceDust>();

    // For drawing
    private Paint paint;
    private Canvas canvas;
    private SurfaceHolder ourHolder;

//در بخش قبل سازنده ی کلاس TDView یک آرگومان یعنی همان Context را داشت و در این بخش سازنده ی این کلاس دو آرگومان دیگر یعنی x و y را نیز دارد که فراخوانی این کلاس با این سه آرگومان صورت میگیرد : 
    TDView(Context context, int x, int y) {
        super(context);

        // Initialize our drawing objects
        ourHolder = getHolder();
        paint = new Paint();


        // Initialise our player ship
        player = new PlayerShip(context, x, y);
        enemy1 = new EnemyShip(context, x, y);
        enemy2 = new EnemyShip(context, x, y);
        enemy3 = new EnemyShip(context, x, y);

        int numSpecs = 50;

//به تعداد پنجاه شئ از کلاس SpaceDust ساخته میشود و در آرایه لیست dustList قرار داده میشوند :
        for (int i = 0; i < numSpecs; i++) {
            // Where will the dust spawn?
            SpaceDust spec = new SpaceDust(x, y);
            dustList.add(spec);
        }
    }

    @Override
    public void run() {
        while (playing) {
            update();
            draw();
            control();
        }
    }

//متد update حالت جدید اشیاء را بعد از تغییر موقعیت آنها اعلام میکند . اگر برخورد بین چهارگوشه ی(HitBox) اشیاء صورت گیرد مقدار x برای نمایش enemy برابر 100- میشود یعنی در خارج از صفحه نمایش سمت چپ با فاصله ی 100 پیکسل از سمت چپ صفحه نمایش ، نمایش داده میشود :
    private void update() {
        // Collision detection on new positions
        // Before move because we are testing last frames
        // position which has just been drawn

        if (Rect.intersects(player.getHitbox(), enemy1.getHitbox())) {
            enemy1.setX(-100);
        }

        if (Rect.intersects(player.getHitbox(), enemy2.getHitbox())) {
            enemy2.setX(-100);
        }

        if (Rect.intersects(player.getHitbox(), enemy3.getHitbox())) {
            enemy3.setX(-100);
        }


        // Update the player
        player.update();
        // Update the enemies

//در حین بازی سرعت بازی طبق متد update از کلاس PlayerShip در حال افزایش است پس آپدیت بر حسب player.getSpeed صورت میگیرد تا هماهنگی ایی بین player و سایر اشیاء محیط بازی بوجود بیاید  و بازی حالت هماهنگی خود را حفظ کند :
        enemy1.update(player.getSpeed());
        enemy2.update(player.getSpeed());
        enemy3.update(player.getSpeed());

//تمام عناصر موجود در آرایه لیست را آپدیت میکند :
        for (SpaceDust sd : dustList) {
            sd.update(player.getSpeed());
        }

    }

    private void draw() {

        if (ourHolder.getSurface().isValid()) {
            //First we lock the area of memory we will be drawing to
            canvas = ourHolder.lockCanvas();

            // Rub out the last frame
            canvas.drawColor(Color.argb(255, 0, 0, 0));

            // For debugging
            // Switch to white pixels
            paint.setColor(Color.argb(255, 255, 255, 255));

            // Draw Hit boxes

//این چند خط که کامنت شده اند یک Rect (و یا همان چهارگوشه و یا همان Hitbox) در اطراف اشیاء درون محیط بازی طراحی میکنند . که بدلیل نیاز نبودن آنها کامنت شده اند :
          /*
            canvas.drawRect(player.getHitbox().left,
                    player.getHitbox().top,
                    player.getHitbox().right,
                    player.getHitbox().bottom,
                    paint);

            canvas.drawRect(enemy1.getHitbox().left,
                    enemy1.getHitbox().top,
                    enemy1.getHitbox().right,
                    enemy1.getHitbox().bottom,
                    paint);

            canvas.drawRect(enemy2.getHitbox().left,
                    enemy2.getHitbox().top,
                    enemy2.getHitbox().right,
                    enemy2.getHitbox().bottom,
                    paint);

            canvas.drawRect(enemy3.getHitbox().left,
                    enemy3.getHitbox().top,
                    enemy3.getHitbox().right,
                    enemy3.getHitbox().bottom,
                    paint);
            */

            // White specs of dust
            paint.setColor(Color.argb(255, 255, 255, 255));
//گرد و غبار در صفحه نمایش طراحی میشوند :
            //Draw the dust from our arrayList
            for (SpaceDust sd : dustList) {
               canvas.drawPoint(sd.getX(), sd.getY(), paint);
           }

//شئ اصلی(player) و دشمنان(enemy) طراحی میشوند :
            // Draw the player
            canvas.drawBitmap(player.getBitmap(), player.getX(), player.getY(), paint);
            canvas.drawBitmap(enemy1.getBitmap(), enemy1.getX(), enemy1.getY(), paint);
            canvas.drawBitmap(enemy2.getBitmap(), enemy2.getX(), enemy2.getY(), paint);
            canvas.drawBitmap(enemy3.getBitmap(), enemy3.getX(), enemy3.getY(), paint);

            // Unlock and draw the scene
            ourHolder.unlockCanvasAndPost(canvas);
        }
    }

    private void control() {
        try {
            gameThread.sleep(17);
        } catch (InterruptedException e) {

        }
    }

    // SurfaceView allows us to handle the onTouchEvent
    @Override
    public boolean onTouchEvent(MotionEvent motionEvent) {

        // There are many different events in MotionEvent
        // We care about just 2 - for now.
        switch (motionEvent.getAction() & MotionEvent.ACTION_MASK) {
            // Has the player lifted there finger up?

//در صورت برداشتن انگشت و یا فشردن انگشت روی صفحه نمایش دو متد stopBoosting و setBoosting از کلاس PlayerShip فراخوانی میشود :
            case MotionEvent.ACTION_UP:
                player.stopBoosting();
                break;

            // Has the player touched the screen?
            case MotionEvent.ACTION_DOWN:
                player.setBoosting();
                break;
        }
        return true;
    }

    // Clean up our thread if the game is interrupted or the player quits
    public void pause() {
        playing = false;
        try {
            gameThread.join();
        } catch (InterruptedException e) {

        }
    }

    // Make a new thread and start it
    // Execution moves to our R
    public void resume() {
        playing = true;
        gameThread = new Thread(this);
        gameThread.start();
    }


}
