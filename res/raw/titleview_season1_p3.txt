

import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.view.MotionEvent;
import android.view.View;

public class TitleView extends View {


//تعریف اشیاء و متغیرهای مورد نیاز در برنامه :
	private Bitmap titleGraphic;
	private Bitmap playButtonUp;
	private Bitmap playButtonDown;
	private int screenW;
	private int screenH;
	private boolean playButtonPressed;
	private Context myContext;
	
//سازنده ی کلاس و مقداردهی متغیرها و اشیاء توسط آن :
	public TitleView(Context context) {
		super(context);
		myContext = context;

//آدرس چند تصویر بعنوان آرگومان به Bitmap داده شده است:
		titleGraphic = BitmapFactory.decodeResource(getResources(), R.drawable.title_graphic);
		playButtonUp = BitmapFactory.decodeResource(getResources(), R.drawable.play_button_up);
		playButtonDown = BitmapFactory.decodeResource(getResources(), R.drawable.play_button_down);
	}

//متد ()onSizeChanged زمانی فراخوانی میشود که کاربر صفحه نمایش را لمس کند . سیستم عامل اندروید زمانیکه یک اکتیویتی را آغاز میکند ، در ابتدا ابعاد را بصورت تعیین شده در اختیار ندارد و باید آنرا محاسبه کند ، در اینجاست که متد بوسیله ی متد  ()onSizeChanged اینکار را انجام میدهد و این متد فراخوانی میشود . پس w و h بعنوان ابعاد جدید تعیین شده و ابعاد صفحه نمایش میباشند(که در زیر آنها را در دو متغیر screenW و screenH قرار داده ایم) :
    @Override
    public void onSizeChanged (int w, int h, int oldw, int oldh){
        super.onSizeChanged(w, h, oldw, oldh);
        screenW = w;
        screenH = h;

    }
	
	@Override 
	protected void onDraw(Canvas canvas) {

//تعیین رنگ زمینه :
	canvas.drawRGB(114,2,141);

//طراحی یک Bitmap , آرگومان اول در این متد همان Bitmap است که در متد سازنده ی کلاس تعریف و مقداردهی شد . آرگومان دوم ، فاصله ی تصویر از سمت چپ صفحه نمایش است(که در اینجا برابر عرض صفحه منهای عرض تصویر تقسیم بر دو میباشد . آرگومان سوم فاصله تصویر از بالای صفحه نمایش است(که در اینجا صفر تعیین شده یعنی تصویر مماس با حاشیه ی بالایی صفحه نمایش است))
		canvas.drawBitmap(titleGraphic, (screenW-titleGraphic.getWidth())/2, 0, null);

//این شرط برای فشرده شدن کلید play تعیین شده که در متد onTouchEvent مقداردهی میشود(با فشردن کلید ، تصویر زمینه ی کلید تغییر میکند) :
		if (playButtonPressed) {
			canvas.drawBitmap(playButtonDown, (screenW-playButtonUp.getWidth())/2, (int)(screenH*0.7), null);	
		} else {
			canvas.drawBitmap(playButtonUp, (screenW-playButtonUp.getWidth())/2, (int)(screenH*0.7), null);			
		}
	}
	 

//این متد طول و عرض نقطه ی لمس صفحه نمایش را در X و Y قرار میدهد و اگر این نقطه تماس همان محدوده کلید play باشد ، متغیر playButtonPressed مقدار true میگیرد :

	 public boolean onTouchEvent(MotionEvent event) {
	        int eventaction = event.getAction();   
	        int X = (int)event.getX();
	        int Y = (int)event.getY();

	        switch (eventaction ) {

	        case MotionEvent.ACTION_DOWN: 
	        	if (X > (screenW-playButtonUp.getWidth())/2 &&
	        		X < ((screenW-playButtonUp.getWidth())/2) + playButtonUp.getWidth() &&
	        		Y > (int)(screenH*0.7) &&
	        		Y < (int)(screenH*0.7) + playButtonUp.getHeight()) {
	        		playButtonPressed = true;
	        	}	        		
	        	break;

	        case MotionEvent.ACTION_MOVE: 
	        	break;
	        	
	        case MotionEvent.ACTION_UP:
	        	playButtonPressed = false;
	        	break;
	        } 
	        invalidate();
			return true;      
	}
}
