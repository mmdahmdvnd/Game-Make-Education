import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Rect;

public class PlayerShip {
    private Bitmap bitmap;
    private int x, y;
    private int speed;

//معرفی چند متغیر مورد نیاز در برنامه :
    private boolean boosting;

    private final int GRAVITY = -12;

    // Stop ship leaving the screen
    private int maxY;
    private int minY;

    private final int MIN_SPEED = 1;
    private final int MAX_SPEED = 20;

    // A hit box for collision detection
    private Rect hitBox;


    // Constructor
    public PlayerShip(Context context, int screenX, int screenY) {
        boosting = false;
        x = 50;
        y = 50;
        speed = 1;
        bitmap = BitmapFactory.decodeResource(context.getResources(), R.drawable.ship);

//بیشترین مقداریکه player میتواند به پایین صفحه نمایش بیاید به اندازه ی ارتفاع صفحه نمایش منهای ارتفاع تصویر player میباشد(نقطه ی (0و0) محور x و y در صفحه نمایش ، نقطه ی بالا و چپ صفحه نمایش میباشد) :
        maxY = screenY - bitmap.getHeight();
        minY = 0;


        // Initialize the hit box
//بجهت اینکه بتوان برخورد بین دو شئ را بررسی کرد یک چهارگوشه در اطراف هر شئ در محیط بازی قرار میگیرد . x و y نقطه ی گوشه ی سمت چپ و بالای چهارگوشه هستند و bitmap.getWidth و bitmap.getHeight عرض و ارتفاع چهارگوشه میباشند :
        hitBox = new Rect(x, y, bitmap.getWidth(), bitmap.getHeight());
    }

//در کلاس TDView اگر انگشت صفحه نمایش را لمس کند پس متد setBoosting مقدار boosting = true را برمیگرداند و سرعت طبق متد زیر دو واحد افزایش میابد . و اگر انگشت از صفحه نمایش برداشته شود ، پنج واحد از سرعت کاسته میشود :
    public void update() {
        if (boosting) {
            speed += 2;
        } else {
            speed -= 5;
        }

//اگر سرعت با ادامه ی بازی افزایش یافته باشد ، در آپدیت کردن player همان سرعت بعنوان سرعت آپدیت شده منظور میشود(تا هماهنگی لحظه ای بین اشیاء بازی رخ دهد و مثلا بازی پرش نداشته باشد)
        if (speed > MAX_SPEED) {
            speed = MAX_SPEED;
        }

        if (speed < MIN_SPEED) {
            speed = MIN_SPEED;
        }

//مقدار y جدید در هنگام آپدیت کردن همان ارتفاع player در زمینه ی بازی است . GRAVITY که مقدار ثابت 12- را در بالای همین صفحه کد دارد . speed که مقداری متغیر است و به این دلیل در اینجا بکار رفته که : در حین بازی سرعت بازی طبق player.update در حال افزایش است پس اگر در حالت سرعتهای متفاوت حرکت player ، انگشت را از صفحه نمایش برداریم ارتفاعی که بلافاصله در حال کم شدن است مضربی از سرعت player است :
        // fly up or down
        y -= speed + GRAVITY;

//اجازه ی نمیدهد player از بالا و پایین صفحه نمایش خارج شود :
        // Don't let ship stray off screen
        if (y < minY) {
            y = minY;
        }
        if (y > maxY) {
            y = maxY;
        }

        // Refresh hit box location
//در زمان آپدیت کردن player(که در ثانیه شصت بار رخ میدهد) باید چهارگوشه ی اطراف آن نیز آپدیت شود تا با آن حرکت کند :
        hitBox.left = x;
        hitBox.top = y;
        hitBox.right = x + bitmap.getWidth();
        hitBox.bottom = y + bitmap.getHeight();


    }

    public void setBoosting() {

        boosting = true;
    }

    public void stopBoosting() {

        boosting = false;
    }

    //Getters
    public Bitmap getBitmap() {

        return bitmap;
    }

    public int getSpeed() {

        return speed;
    }

    public int getX() {

        return x;
    }

    public int getY() {

        return y;
    }

    public Rect getHitbox(){
        return hitBox;
    }

}
